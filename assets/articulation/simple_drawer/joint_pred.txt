from articulate_anything.odio.odio_urdf import *


def partnet_44962(intput_dir, links):
    """
    No. masked_links: 5
    Robot Link Summary:
    - base
    - drawer
    - drawer_2
    - drawer_3
    - furniture_body

    Object: a cabinet with 3 drawers
    Targetted affordance: drawer_3
    """
    pred_robot = Robot(input_dir=intput_dir, name="cabinet")
    pred_robot.add_link(links['base'])
    pred_robot.add_link(links['furniture_body'])
    pred_robot.add_joint(Joint("base_to_furniture_body",
                         Parent("base"),
                         Child("furniture_body"),
                         type="fixed"),
    )

    ## =============================================
    ## partnet mobility peculiarity: need to always call this function
    ## after the first joint to orientate the robot correctly
    pred_robot.align_robot_orientation()
    ## =============================================


    pred_robot.add_link(links['drawer_3'])
    pred_robot.place_relative_to('drawer_3', 'furniture_body',
                                    placement="inside",
                                    clearance=0.0)
    # ========================================================
    pred_robot.add_link(links['drawer_2'])
    pred_robot.place_relative_to('drawer_2', 'furniture_body',
                                    placement="inside",
                                    clearance=0.0)
    # ========================================================
    pred_robot.add_link(links['drawer'])
    pred_robot.place_relative_to('drawer', 'furniture_body',
                                    placement="inside",
                                    clearance=0.0)
    # ====================JOINT PREDICTION====================
    target_drawer_link = "drawer_3"
    lower_point = [
        0,
        0,
        0,
    ]  # the drawer is fully retracted. At the same pos (hide in the box) ## TUNABLE
    bbox = pred_robot.get_bounding_boxes(
        [target_drawer_link], include_dim=True
    )  # get all bounding boxes for all links

    bbox_dim = bbox[target_drawer_link][1]
    upper_point = [
        bbox_dim["length"],
        0,
        0,
    ]  # the drawer is fully extended. At the same pos as the drawer_width ## TUNABLE
    # the drawer slides forward and backward so x-axis
    pred_robot.make_prismatic_joint(
        target_drawer_link, "furniture_body", lower_point, upper_point
    )
    return pred_robot
